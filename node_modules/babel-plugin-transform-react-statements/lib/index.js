"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = function () {
    return {
        inherits: require("babel-plugin-syntax-jsx"),

        visitor: {
            JSXElement: function JSXElement(path, state) {
                if (checkTransformComplete(path)) return;

                var source = path.getSource();
                var plugin = createPlugin(state.opts);

                var _babel$transform = babel.transform(source, { plugins: [plugin] }),
                    ast = _babel$transform.ast;

                var _ast$program$body = _slicedToArray(ast.program.body, 1),
                    element = _ast$program$body[0].expression;

                path.replaceWith(element);
                path.setData(property, true);
            }
        }
    };
};

var _ifStatement = require("./if-statement.js");

var _ifStatement2 = _interopRequireDefault(_ifStatement);

var _forStatement = require("./for-statement.js");

var _forStatement2 = _interopRequireDefault(_forStatement);

var _switchStatement = require("./switch-statement.js");

var _switchStatement2 = _interopRequireDefault(_switchStatement);

var _componentStatement = require("./component-statement.js");

var _componentStatement2 = _interopRequireDefault(_componentStatement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babel = require("babel-core");

var t = babel.types;
var property = "54e38893-8f41-499b-a023-36ecc34805cc";

function createPlugin(options) {
    return function plugin() {
        return {
            inherits: require("babel-plugin-syntax-jsx"),

            visitor: {
                JSXElement: {
                    enter: function enter(path) {
                        var tagName = getTagName(path, options);

                        switch (tagName) {
                            case "For":
                                (0, _forStatement2.default)(path, options);
                                break;

                            case "Switch":
                                (0, _switchStatement2.default)(path, options);
                                break;

                            case "Component":
                                (0, _componentStatement2.default)(path, options);
                                break;
                        }
                    },
                    exit: function exit(path) {
                        var tagName = getTagName(path, options);

                        switch (tagName) {
                            case "If":
                                (0, _ifStatement2.default)(path, options);
                                break;
                        }
                    }
                }
            }
        };
    };
}

function getTagName(_ref, _ref2) {
    var element = _ref.node;
    var disabled = _ref2.disabled,
        rename = _ref2.rename;
    var name = element.openingElement.name.name;


    if (Array.isArray(disabled) && disabled.some(function (item) {
        return item == name;
    })) return null;

    for (var originName in rename) {
        var alias = rename[originName];

        if (alias == name) return originName;
    }

    return name;
}

function checkTransformComplete(path) {
    if (path.getData(property)) return true;

    var parentPath = path.parentPath;


    return parentPath ? checkTransformComplete(parentPath) : false;
}