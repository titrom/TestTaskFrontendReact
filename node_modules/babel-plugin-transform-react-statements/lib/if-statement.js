"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = function (path, options) {
    var node = path.node;
    var attributes = node.openingElement.attributes;


    if (attributes.length != 1) throw new Error(errors.ATTRIBUTES_LENGTH);

    var _attributes = _slicedToArray(attributes, 1),
        attribute = _attributes[0];

    var type = attribute.name.name;


    if (type != "true" && type != "false") throw new Error(errors.INVALID_ATTRIBUTE_NAME);

    var expressionContainer = attribute.value;


    if (!t.isJSXExpressionContainer(expressionContainer)) throw new Error(errors.INVALID_ATTRIBUTE_VALUE);

    var conditionExpression = expressionContainer.expression;


    if (type == "false") {
        conditionExpression = t.unaryExpression("!", conditionExpression);
    }

    var expressions = (0, _commonLib.getChildren)(node).map(toExpression, conditionExpression);

    if (expressions.length == 1 && !path.parentPath.isJSXElement()) {
        var element = expressions[0].right;


        if (!t.isJSXElement(element)) {
            var wrapper = options.wrapper || "<span />";

            if (wrapper.trim()[0] == "<") {
                expressions = [t.logicalExpression("&&", conditionExpression, (0, _commonLib.wrapElement)(element, wrapper))];
            }
        }
    }

    (0, _commonLib.appendExpressions)(expressions, path, options);
};

var _commonLib = require("./common-lib.js");

var t = require("babel-types");

var errors = {
    ATTRIBUTES_LENGTH: "statement must have only one attribute",
    INVALID_ATTRIBUTE_NAME: "incorrect attribute name",
    INVALID_ATTRIBUTE_VALUE: "incorrect attribute value",
    CHILD_MUST_BE_JSX_ELEMENT: "child must be as JSX Element"
};

function toExpression(node) {
    var conditionExpression = this;

    if (t.isJSXElement(node)) {
        return t.logicalExpression("&&", conditionExpression, node);
    }

    if (t.isJSXExpressionContainer(node)) {
        return t.logicalExpression("&&", conditionExpression, node.expression);
    }

    if (t.isJSXEmptyExpression(node)) {
        return t.logicalExpression("&&", this, t.nullLiteral());
    }

    if (t.isJSXText(node)) {
        return t.logicalExpression("&&", conditionExpression, t.stringLiteral(node.value));
    }
}